import { Chapter, H } from '@/components/ui/textFormat'
import { Code } from '@/components/ui/code'
import SyntaxHighlighter from 'react-syntax-highlighter'
import { irBlack } from 'react-syntax-highlighter/dist/esm/styles/hljs'

export default function Chapter3({ id }: { id?: string }) {
 return (
  <>
   <Chapter id={id}>3. Basic Configuration</Chapter>
   <div className="flex flex-col gap-8 ml-5 mt-2">
    <div>
     <H>
      As a first thing we will change the font. To change it we need to modifie{' '}
      <code>src/app/layout.tsx</code>
     </H>
     <H>by changing this line </H>
     <div className="ml-8 mb-5">
      <Code>
       <SyntaxHighlighter language="typescript" style={irBlack}>
        {`import {Inter} from 'next/font/google';`}
       </SyntaxHighlighter>
      </Code>
      to import GeistSans font
      <Code text="import {GeistSans} from 'geist/font/sans';">
       <SyntaxHighlighter language="typescript" style={irBlack}>
        {`import {GeistSans} from 'geist/font/sans';`}
       </SyntaxHighlighter>
      </Code>
     </div>
     <H>then removing this line</H>
     <div className="ml-8 mb-5">
      <Code>
       <SyntaxHighlighter language="typescript" style={irBlack}>
        {`const inter = Inter({subsets: ['latin']}); `}
       </SyntaxHighlighter>
      </Code>
     </div>
     <H>and at last changing body tag className from Inter </H>
     <div className="ml-8 mb-5">
      <Code>
       <SyntaxHighlighter language="htmlbars" style={irBlack}>
        {`<body className={Inter.className}>{children}</body>`}
       </SyntaxHighlighter>
      </Code>
      <H>to GeistSans to apply font to whole document</H>
      <Code text="<body className={GeistSans.className}>{children}</body>">
       <SyntaxHighlighter language="htmlbars" style={irBlack}>
        {`<body className={GeistSans.className}>{children}</body>`}
       </SyntaxHighlighter>
      </Code>
     </div>
     <H>
      So the <code>src/app/layout.tsx</code> should look like this
     </H>
     <Code
      text={`
      import type { Metadata } from "next";
      import { GeistSans } from "geist/font/sans";
      import "./globals.css";
      
      
      export const metadata: Metadata = {
        title: "Create Next App",
        description: "Generated by create next app",
      };
      
      export default function RootLayout({
        children,
      }: Readonly<{
        children: React.ReactNode;
      }>) {
        return (
          <html lang="en">
          <body className={GeistSans.className}>{children}</body>
          </html>
          );
        }`}>
      <SyntaxHighlighter language="typescript" style={irBlack}>
       {`import type { Metadata } from "next";
import { GeistSans } from "geist/font/sans";
import "./globals.css";


export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
    <body className={GeistSans.className}>{children}</body>
    </html>
    );
  }`}
      </SyntaxHighlighter>
     </Code>
    </div>

    <div>
     <H>
      To use ioredis we need to configure it. To do so we&apos;re going to create{' '}
      <code>src/lib</code> folder in which we&apos;ll create <code>redis.ts</code> file.
     </H>
     <Code
      text={`import Redis from "ioredis";

export default class RedisLib {
  private static instance: RedisLib;
  private redisClient: Redis;

  private constructor() {
    this.redisClient = new Redis(process.env.REDIS_URL as string);
  }

  public static getInstance(): RedisLib {
    if (!this.instance) {
      if (!process.env.REDIS_URL) {
        throw new Error("REDIS_URL is not defined");
      }
      this.instance = new RedisLib();
    }
    return this.instance;
  }

  public getClient(): Redis {
    return this.redisClient;
  }
}
`}>
      <SyntaxHighlighter language="typescript" style={irBlack}>
       {`import Redis from "ioredis";

export default class RedisLib {
  private static instance: RedisLib;
  private redisClient: Redis;

  private constructor() {
    this.redisClient = new Redis(process.env.REDIS_URL as string);
  }

  public static getInstance(): RedisLib {
    if (!this.instance) {
      if (!process.env.REDIS_URL) {
        throw new Error("REDIS_URL is not defined");
      }
      this.instance = new RedisLib();
    }
    return this.instance;
  }

  public getClient(): Redis {
    return this.redisClient;
  }
}
`}
      </SyntaxHighlighter>
     </Code>
    </div>
    <div>
     <H>
      As last thing for basic configuration we&apos;re going to create Error path that is specific
      to Next.js. To create it we need to add file called <code>src/app/error.tsx</code> in which
      we&apos;ll create Error component
     </H>
     <Code
      text={`'use client'
import { useEffect } from 'react'

export default function Error({
 error,
}: {
 error: Error & { digest?: string }
 reset: () => void
}) {
 useEffect(() => {
  console.error(error)
 }, [error])

 return (
  <div className="w-full h-[90vh] flex flex-col justify-center items-center gap-10">
   <h2 className="text-3xl font-bold">Something went wrong!</h2>
   <button className="text-xl bg-blue-400 rounded-xl px-4 py-2 text-black hover:bg-blue-500" onClick={() => window.location.reload()}>
    Try again
   </button>
   <button className="text-xl bg-red-400 rounded-xl px-4 py-2 text-black hover:bg-red-500" onClick={() => window.history.back()}>
    Go Back
   </button>
   <div className="flex flex-col justify-center items-center gap-1">
    <code>Name: {error.name}</code>
    <code>Message: {error.message}</code>
   </div>
  </div>
 )
}
     `}>
      <SyntaxHighlighter language="typescript" style={irBlack}>
       {`'use client'
import { useEffect } from 'react'

export default function Error({
 error,
}: {
 error: Error & { digest?: string }
 reset: () => void
}) {
 useEffect(() => {
  console.error(error)
 }, [error])

 return (
  <div className="w-full h-[90vh] flex flex-col justify-center items-center gap-10">
   <h2 className="text-3xl font-bold">Something went wrong!</h2>
   <button className="text-xl bg-blue-400 rounded-xl px-4 py-2 text-black hover:bg-blue-500" onClick={() => window.location.reload()}>
    Try again
   </button>
   <button className="text-xl bg-red-400 rounded-xl px-4 py-2 text-black hover:bg-red-500" onClick={() => window.history.back()}>
    Go Back
   </button>
   <div className="flex flex-col justify-center items-center gap-1">
    <code>Name: {error.name}</code>
    <code>Message: {error.message}</code>
   </div>
  </div>
 )
}
        `}
      </SyntaxHighlighter>
     </Code>
    </div>
   </div>
  </>
 )
}
